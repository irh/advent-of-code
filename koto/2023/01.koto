# https://adventofcode.com/2023/day/1

from '../helpers' import run_day

digits_only =
  ('1', 1), ('2', 2), ('3', 3), ('4', 4), ('5', 5), ('6', 6), ('7', 7), ('8', 8), ('9', 9)

digits_and_words = digits_only + (
  ('one', 1), ('two', 2), ('three', 3),
  ('four', 4), ('five', 5), ('six', 6),
  ('seven', 7), ('eight', 8), ('nine', 9),
)

first_digit = |line, digits|
  until line.is_empty()
    for digit, value in digits
      if line.starts_with digit
        return value
    line = line[1..]

last_digit = |line, digits|
  until line.is_empty()
    for digit, value in digits
      if line.ends_with digit
        return value
    line = line[..(size line) - 1]

calibration_value = |line, digits|
  first = first_digit line, digits
  last = last_digit line, digits
  first * 10 + last

calibration_value_1 = |line| calibration_value line, digits_only
calibration_value_2 = |line| calibration_value line, digits_and_words

part_one = |input|
  input
    .lines()
    .each calibration_value_1
    .sum()

part_two = |input|
  input
    .lines()
    .each calibration_value_2
    .sum()

@main = ||
  run_day 1, |input|
    print "Part one: {part_one input}" # 54081
    print "Part two: {part_two input}" # 54649

@tests =
  @test calibration_value_1: ||
    assert_eq (calibration_value_1 '1abc2'), 12
    assert_eq (calibration_value_1 'pqr3stu8vwx'), 38
    assert_eq (calibration_value_1 'treb7uchet'), 77

  @test calibration_value_2: ||
    assert_eq (calibration_value_2 'two1nine'), 29
    assert_eq (calibration_value_2 'zoneight234'), 14
    assert_eq (calibration_value_2 'oneight'), 18

  @test part_one: ||
    input = "\
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet"
    assert_eq (part_one input), 142

  @test part_two: ||
    input = "\
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen"

    assert_eq (part_two input), 281
